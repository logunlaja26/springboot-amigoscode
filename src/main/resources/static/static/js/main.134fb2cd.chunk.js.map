{"version":3,"sources":["Container.js","Footer.js","client.js","forms/AddStudentForm.js","Notification.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","color","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","inputBottomMargin","marginBottom","tagStyle","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","headers","Accept","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","type","disabled","openNotification","message","description","notification","errorNotification","App","state","students","isFetching","isAddStudentModalVisible","openAddStudentModal","setState","closeAddStudentModal","fetchStudents","res","console","log","this","commonElements","title","visible","onOk","onCancel","httpStatus","length","indicator","LoadingOutlined","fontSize","spin","columns","key","render","text","charAt","toUpperCase","dataIndex","dataSource","pagination","rowKey","Component","Boolean","window","location","hostname","match","ReactDOM","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.134fb2cd.chunk.js","sourcesContent":["import React from 'react';\nconst Container = props => (\n    <div style={{width: '1400px', margin: '0 auto', textAlign: 'center'}}>\n        {props.children}\n    </div>\n);\n    \nexport default Container; ","import React from \"react\";\nimport Container from \"./Container\";\nimport { Avatar, Button } from \"antd\";\nimport \"./Footer.css\";\n\nconst Footer = (props) => (\n  <div className=\"footer\">\n    <Container>\n      {props.numberOfStudents !== undefined ? (\n        <Avatar\n          style={{ backgroundColor: \"#f56a00\", marginRight: \"5px\" }}\n          size=\"large\"\n        >\n          {props.numberOfStudents}\n        </Avatar>\n      ) : null}\n      <Button\n        onClick={() => props.handleAddStudentClickEvent()}\n        color=\"primary\"\n      >\n        {\" \"}\n        Add new student +\n      </Button>\n    </Container>\n  </div>\n);\n\nexport default Footer;\n","import fetch from \"unfetch\";\n\nconst checkStatus = (response) => {\n  if (response.ok) {\n    return response;\n  } else {\n    let error = new Error(response.statusText);\n    error.response = response;\n    response.json().then((e) => {\n      error.error = e;\n    });\n    return Promise.reject(error);\n  }\n};\n\nexport const getAllStudents = () => fetch(\"api/students\").then(checkStatus);\n\nexport const addNewStudent = (student) =>\n  fetch(\"api/students\", {\n    headers: {\n      Accept: \"application/json, text/plain\",\n      \"Content-Type\": \"application/json;charset=UTF-8\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(student),\n  }).then(checkStatus);\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Input, Button, Tag } from \"antd\";\nimport { addNewStudent } from \"../client\";\n\nconst inputBottomMargin = { marginBottom: \"10px\" };\nconst tagStyle = {\n  backgroundColor: \"#f50\",\n  color: \"white\",\n  ...inputBottomMargin,\n};\n\nconst AddStudentForm = (props) => (\n  <Formik\n    initialValues={{ firstName: \"\", lastName: \"\", email: \"\", gender: \"\" }}\n    validate={(values) => {\n      const errors = {};\n\n      if (!values.firstName) {\n        errors.firstName = \"First Name Required\";\n      }\n      if (!values.lastName) {\n        errors.lastName = \"Last Name Required\";\n      }\n      if (!values.email) {\n        errors.email = \"Email Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      if (!values.gender) {\n        errors.gender = \"Gender Required\";\n      } else if (\n        ![\"MALE\", \"male\", \"FEMALE\", \"female\"].includes(values.gender)\n      ) {\n        errors.gender = \"Gender must be (MALE,male,FEMALE,female)\";\n      }\n\n      return errors;\n    }}\n    onSubmit={(student, { setSubmitting }) => {\n      addNewStudent(student)\n        .then(() => {\n          props.onSuccess();\n          setSubmitting(false);\n        })\n        .catch((err) => {\n          props.onFailure(err);\n        })\n        .finally(() => {\n          setSubmitting(false);\n        });\n    }}\n  >\n    {({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting,\n      submitForm,\n      isValid,\n      /* and other goodies */\n    }) => (\n      <form onSubmit={handleSubmit}>\n        <Input\n          style={inputBottomMargin}\n          name=\"firstName\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.firstName}\n          placeholder=\"First Name. E.g Ly\"\n        />\n        {errors.firstName && touched.firstName && (\n          <Tag style={tagStyle}>{errors.firstName}</Tag>\n        )}\n        <Input\n          style={inputBottomMargin}\n          name=\"lastName\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.lastName}\n          placeholder=\"Last Name. E.g Ogunlaja\"\n        />\n        {errors.lastName && touched.lastName && (\n          <Tag style={tagStyle}>{errors.lastName}</Tag>\n        )}\n        <Input\n          style={inputBottomMargin}\n          name=\"email\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.email}\n          placeholder=\"email. E.g Ly@gmail.com\"\n        />\n        {errors.email && touched.email && (\n          <Tag style={tagStyle}>{errors.email}</Tag>\n        )}\n        <Input\n          style={inputBottomMargin}\n          name=\"gender\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.gender}\n          placeholder=\"Gender. E.g Male or Female\"\n        />\n        {errors.gender && touched.gender && (\n          <Tag style={tagStyle}>{errors.gender}</Tag>\n        )}\n\n        <Button\n          onClick={() => submitForm()}\n          type=\"submit\"\n          disabled={isSubmitting | (touched && !isValid)}\n        >\n          Submit\n        </Button>\n      </form>\n    )}\n  </Formik>\n);\n\nexport default AddStudentForm;\n","import { notification } from \"antd\";\n\nconst openNotification = (type, message, description) => {\n  notification[type]({\n    message,\n    description,\n  });\n};\n\nexport const successNotification = (message, description) =>\n  openNotification(\"success\", message, description);\n\nexport const infoNotification = (message, description) =>\n  openNotification(\"info\", message, description);\n\nexport const warningNotification = (message, description) =>\n  openNotification(\"warning\", message, description);\n\nexport const errorNotification = (message, description) =>\n  openNotification(\"error\", message, description);\n","import React, { Component } from \"react\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport AddStudentForm from \"./forms/AddStudentForm\";\nimport \"./App.css\";\nimport { getAllStudents } from \"./client\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { Table, Avatar, Spin, Modal, Empty } from \"antd\";\nimport { errorNotification } from \"./Notification\";\n\nconst getIndicatorIcon = () => (\n  <LoadingOutlined style={{ fontSize: 24 }} spin />\n);\n\nclass App extends Component {\n  state = {\n    students: [],\n    isFetching: false,\n    isAddStudentModalVisible: false,\n  };\n\n  componentDidMount() {\n    this.fetchStudents();\n  }\n\n  openAddStudentModal = () => this.setState({ isAddStudentModalVisible: true });\n\n  closeAddStudentModal = () =>\n    this.setState({ isAddStudentModalVisible: false });\n\n  fetchStudents = () => {\n    this.setState({\n      isFetching: true,\n    });\n    getAllStudents()\n      .then((res) =>\n        res.json().then((students) => {\n          console.log(students);\n          this.setState((state) => ({\n            students,\n            isFetching: false,\n          }));\n        })\n      )\n      .catch((error) => {\n        console.log(error.error);\n        const message = error.error.message;\n        const description = error.error.error;\n        errorNotification(message, description);\n        this.setState({\n          isFetching: false,\n        });\n      });\n  };\n  render() {\n    const { students, isFetching, isAddStudentModalVisible } = this.state;\n\n    const commonElements = () => (\n      <div>\n        <Modal\n          title=\"Add new student\"\n          visible={isAddStudentModalVisible}\n          onOk={this.closeAddStudentModal}\n          onCancel={this.closeAddStudentModal}\n          width={1000}\n        >\n          <AddStudentForm\n            onSuccess={() => {\n              this.closeAddStudentModal();\n              this.fetchStudents();\n            }}\n            onFailure={(error) => {\n              const message = error.error.message;\n              const description = error.error.httpStatus;\n              errorNotification(message, description);\n            }}\n          />\n        </Modal>\n        <Footer\n          numberOfStudents={students.length}\n          handleAddStudentClickEvent={this.openAddStudentModal}\n        />\n      </div>\n    );\n\n    if (isFetching) {\n      return (\n        <Container>\n          <Spin indicator={getIndicatorIcon()} />\n        </Container>\n      );\n    }\n\n    if (students && students.length) {\n      const columns = [\n        {\n          title: \"\",\n          key: \"avatar\",\n          render: (text, student) => (\n            <Avatar size=\"large\">\n              {`${student.firstName\n                .charAt(0)\n                .toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n            </Avatar>\n          ),\n        },\n        {\n          title: \"Student Id\",\n          dataIndex: \"studentID\",\n          key: \"studentID\",\n        },\n        {\n          title: \"First Name\",\n          dataIndex: \"firstName\",\n          key: \"firstName\",\n        },\n        {\n          title: \"Last Name\",\n          dataIndex: \"lastName\",\n          key: \"lastName\",\n        },\n        {\n          title: \"Email\",\n          dataIndex: \"email\",\n          key: \"email\",\n        },\n        {\n          title: \"Gender\",\n          dataIndex: \"gender\",\n          key: \"gender\",\n        },\n      ];\n\n      return (\n        <Container>\n          <Table\n            style={{ marginBottom: \"100px\" }}\n            dataSource={students}\n            columns={columns}\n            pagination={false}\n            rowKey=\"studentID\"\n          />\n          {commonElements()}\n        </Container>\n      );\n    }\n\n    return (\n      <Container>\n        <Empty description={<h1>No students found</h1>} />\n        {commonElements()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}